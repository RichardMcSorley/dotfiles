# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

extends javascript

snippet tconst "ts const"
	const ${1}: ${2:any} = ${3};
	${0}
endsnippet
snippet tlet "ts let"
	let ${1}: ${2:any} = ${3};
	${0}
endsnippet
snippet tvar "ts var"
	var ${1}: ${2:any} = ${3};
	${0}
endsnippet
snippet + "ts create field"
	${1}: ${0:any}
endsnippet
snippet #+ "ts create private field using #"
	#${1}: ${0:any}
endsnippet
snippet tpfi "ts create public field"
	public ${1}: ${0:any}
endsnippet
snippet tprfi "ts create private field"
	private ${1}: ${0:any}
endsnippet
snippet tprofi "ts create protected field"
	protected ${1}: ${0:any}
endsnippet
snippet int "interface"
	interface ${1} {
		${2}: ${3:any};
		${0}
	}
endsnippet
snippet intx "interface extends"
	interface ${1} extends ${2} {
		${3}: ${4:any};
		${0}
	}
endsnippet
snippet tfun "ts function"
	function ${1}(${2}): ${3:any} {
		${0}
	}
endsnippet
snippet tpmet "ts public method"
	public ${1}(${2}): ${3:any} {
		${0}
	}
endsnippet
snippet tpsmet "ts public static method"
	public static ${1}(${2}): ${3:any} {
		${0}
	}
endsnippet
snippet tprmet "ts private method"
	private ${1}(${2}): ${3:any} {
		${0}
	}
endsnippet
snippet tpromet "ts protected method"
	protected ${1}(${2}): ${3:any} {
		${0}
	}
endsnippet
snippet tcla "ts class"
	class ${1} {
		${2}
		constructor(public ${3}: ${4: any}) {
			${5}
		}
		${0}
	}
endsnippet
snippet tclax "ts class extends"
	class ${1} extends ${2} {
		${3}
		constructor(public ${4}: ${5: any}) {
			${6}
		}
		${0}
	}
